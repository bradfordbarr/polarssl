#!/usr/bin/env node

var _ = require('lodash');
var fs = require('fs');
var minimist = require('minimist');
var sprintf = require('sprintf-js').sprintf;

function mapTrim(collection) {
  return _.map(collection, function (item) {
    return item.trim();
  });
}

function bufferToObj(buffer) {
  var data = {};
  var split = buffer.toString().trim().split('\r\n');
  for (var i = 0; i < split.length; i++) {
    var splitLine = mapTrim(split[i].split('='));
    data[splitLine[0]] = new Buffer(splitLine[1], 'hex');
  }
  return data;
}

function transform(fileData, outFile) {
  var output = '/** THIS FILE WAS AUTOGENERATED BY key2c **/\n#include <stdint.h>\n';
  var define = 'uint32_t %s_LENGTH = %d;\n'
  var header = 'uint8_t %s[] = {\n';
  var footer = '};\n\n';
  var data = bufferToObj(fileData);

  for (var prop in data) {
    var buffer = data[prop];
    var body = sprintf(define, prop, buffer.length);
    body += sprintf(header, prop);
    for (var i = 1; i <= buffer.length; i++) {
      body += sprintf("0x%02X,", buffer.readUInt8(i - 1));
      if (i % 16 === 0) body += '\n';
    }
    if (buffer.length === 3) body += '\n';
    body += sprintf(footer, prop, buffer.length);
    output += body;
  }

  outFile.write(output);
}

function usage(code, message) {
  var log = (0 === code) ? console.log : console.error;
  if (message) log(message + '\n');
  log('USAGE: pub2c [OPTIONS]');
  log('  -h, --help\t\t\tPrints this message');
  log('  -f, --file\t\t\tFile to change from polarssl format to C format');
  log('  -o, --out\t\t\tFile to write to')
  process.exit(code);
}

function main() {
  var opts = {
    boolean: ['h', 'help'],
    string: ['f', 'file', 'o', 'out'],
  };
  var args = minimist(process.argv.slice(2), opts);
  var help = args['h'] || args['help'] || false;
  var file = args['f'] || args['file'] || null;
  var  out = args['o'] || args['out']  || null;

  if (help) {
    return usage(0);
  }

  if (!file) {
    return usage(1, 'Need a file to transform');
  }

  if (!out) {
    out = process.stdout;
  } else {
    out = fs.createWriteStream(out);
  }

  fs.readFile(file, function (err, data) {
    if (err) { throw err; }
    transform(data, out);
  });
}

main();
